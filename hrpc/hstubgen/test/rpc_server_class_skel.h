/*
Generated by vardist stub generator. Don't change.
*/

#pragma once
#include "../../hcomm/include/common.h"
#include "../../hcomm/include/hcomm.h"
#include "../../hcomm/include/objrepr.h"
#include "rpc_server_class.h"


class RpcServer_fg 
{
 public: 

	static objrepr_t *int_gen(int *a)
	{
		objrepr_t *repr = new objrepr_t;
                char bf[15];
                strcpy(bf, "");
		sprintf(bf, "%d", *a);
                repr->value = string(bf);
		repr->type = "int";
                //delete a;
		return repr;
	}

	static objrepr_t *float_gen(float *a)
	{
		objrepr_t *repr = new objrepr_t;
		char bf[15];
                strcpy(bf, "");
		sprintf(bf, "%f", *a);
                repr->value = bf;
		repr->type = "float";
		return repr;
	}

	static objrepr_t *char_gen(string *a)
	{
		objrepr_t *repr = new objrepr_t;
		repr->value = *a;
		repr->type = "string";
		return repr;
	}

	static int *int_neg(objrepr_t *repr)
	{
		int *r = new int;
		sscanf(repr->value.c_str(), "%d", r);
		delete repr;
		return r;
	}

	static float *float_neg(objrepr_t *repr)
	{
		float *r = new float;
		sscanf(repr->value.c_str(), "%f", r);
		delete repr;
		return r;
	}

	static string *char_neg(objrepr_t *repr)
	{
		string *r = new string;
		*r = repr->value;
		delete repr;
		return r;
	}

   static objrepr_t* string_gen(string *obj)
  {
       objrepr_t* ret = new objrepr_t("string", *obj);
  return ret;
  }

   static objrepr_t* vec_int_gen(vector<int> *obj)
 {
       objrepr_t* ret = new objrepr_t("vector<int>","");
       objrepr_t* elem;
       for (int i = 0; i<obj->size(); i++) 
	{ 
       ret->fields.push_back(pair<string, objrepr_t*>("int", int_gen(&obj->at(i))));
       }
       delete obj;
  return ret;
  }



   static string* string_neg(objrepr_t* repr)
    {
       string* ret = new string;
       *ret = repr->value;
       delete repr;
  return ret;
  }

   static vector<int>* vec_int_neg(objrepr_t *repr)
	{
       vector<int>* ret = new vector<int>;
       for (int i = 0; i<repr->fields.size(); i++) 
        { 
        int *v = int_neg(repr->fields.at(i).second); 
        ret->push_back(*v);
        delete v;
       }
       delete repr;
  return ret;
  }

 

};

class RpcServerstub_t//: public stub_t
{
	char bf[255];
	int bfi; 
 	float bff;
        
        
        
 public:   
         send_channel_t *ch;

		void close() 
		{
			ch->csend("ifs stop"); 
                        ch->close();
		}

		RpcServerstub_t(hcomm_t *c, string name) 
 		{
 			c->open_ifs<RpcServerstub_t>(this, name); 
 		} 

		//remote function (#remote) 
		int isFinished() 
		{ 
			ch->csend("isFinished");
			int *v;
			v = RpcServer_fg::int_neg(objrepr_recv(ch, 1));
                        int ret = *v;
                        delete v;
		return ret;
		} 
		//End remote function 

		//remote function (#remote) 
		vector<int> getInput(int count, string worker_id) 
		{ 
			ch->csend("getInput");
			objrepr_send(RpcServer_fg::int_gen(&count), ch, 1);
			objrepr_send(RpcServer_fg::string_gen(&worker_id), ch, 1);
			vector<int> ret;
                        vector<int> *v;
			v = RpcServer_fg::vec_int_neg(objrepr_recv(ch, 1));
                        ret = *v;
                        delete v;
		return ret;
		} 
		//End remote function 

		//remote function (#remote) 
		void setHandled(int input_id) 
		{ 
			ch->csend("setHandled");
			objrepr_send(RpcServer_fg::int_gen(&input_id), ch, 1);
			
		} 
		//End remote function 

		//remote function (#remote) 
		void lockResult(int result_id, string worker_id) 
		{ 
			ch->csend("lockResult");
			objrepr_send(RpcServer_fg::int_gen(&result_id), ch, 1);
			objrepr_send(RpcServer_fg::string_gen(&worker_id), ch, 1);
			
		} 
		//End remote function 

		//remote function (#remote) 
		void unlockResult(int result_id, string worker_id) 
		{ 
			ch->csend("unlockResult");
			objrepr_send(RpcServer_fg::int_gen(&result_id), ch, 1);
			objrepr_send(RpcServer_fg::string_gen(&worker_id), ch, 1);
			

		
		} 
		//End remote function 

};

// Server skel for RpcServer
class RpcServerskel_t : public skel_t
{
	RpcServer *obj;

	char bf[255]; 
 	int bfi; 
 	float bff;
	public: 

	RpcServerskel_t(RpcServer *o) { obj = o; }

	virtual char *call(send_channel_t* ch, string command) 
	{ 
		//remote function (#remote) 
		if (command == "isFinished") 
		{ 
			int *ret = new int;
			*ret = obj->isFinished();
			objrepr_send(RpcServer_fg::int_gen(ret), ch, 1);
                        
		return 0;
		} 
		//End remote function 

		//remote function (#remote) 
		if (command == "getInput") 
		{ 
			int *count = RpcServer_fg::int_neg(objrepr_recv(ch, 1));
			string *worker_id = RpcServer_fg::string_neg(objrepr_recv(ch, 1));
			vector<int> *ret = new vector<int>;
			*ret = obj->getInput( *count, *worker_id);
                        delete count;
                        delete worker_id;
			objrepr_send(RpcServer_fg::vec_int_gen(ret), ch, 1);

		return 0;
		} 
		//End remote function 

		//remote function (#remote) 
		if (command == "setHandled") 
		{ 
			int *input_id = RpcServer_fg::int_neg(objrepr_recv(ch, 1));
			obj->setHandled( *input_id);
                        delete input_id;

		return 0;
		} 
		//End remote function 

		//remote function (#remote) 
		if (command == "lockResult") 
		{ 
			int *result_id = RpcServer_fg::int_neg(objrepr_recv(ch, 1));
			string *worker_id = RpcServer_fg::string_neg(objrepr_recv(ch, 1));
			obj->lockResult( *result_id, *worker_id);
                        delete result_id;
                        delete worker_id;
		return 0;
		} 
		//End remote function 

		//remote function (#remote) 
		if (command == "unlockResult") 
		{ 
			int *result_id = RpcServer_fg::int_neg(objrepr_recv(ch, 1));
			string *worker_id = RpcServer_fg::string_neg(objrepr_recv(ch, 1));
			obj->unlockResult( *result_id, *worker_id);
                        delete result_id;
                        delete worker_id;
		return 0;
		} 
		//End remote function 

	}

 
 };

/*
Generated by vardist stub generator. Don't change.
*/

#pragma once
#include "common.h"
#include "objrepr.h"
#include "hfss.h"


class hfss_t_fg 
{
 public: 

	static objrepr_t *int_gen(int *a)
	{
		objrepr_t *repr = new objrepr_t;
                char bf[15];
                strcpy(bf, "");
		sprintf(bf, "%d", *a);
                repr->value = bf;
		repr->type = "int";
		return repr;
	}

	static objrepr_t *float_gen(float *a)
	{
		objrepr_t *repr = new objrepr_t;
		char bf[15];
                strcpy(bf, "");
		sprintf(bf, "%f", *a);
                repr->value = bf;
		repr->type = "float";
		return repr;
	}

	static objrepr_t *char_gen(string *a)
	{
		objrepr_t *repr = new objrepr_t;
		repr->value = *a;
		repr->type = "string";
		return repr;
	}

	static int *int_neg(objrepr_t *repr)
	{
		int *r = new int;
		sscanf(repr->value.c_str(), "%d", r);
		delete repr;
		return r;
	}

	static float *float_neg(objrepr_t *repr)
	{
		float *r = new float;
		sscanf(repr->value.c_str(), "%f", r);
		delete repr;
		return r;
	}

	static string *char_neg(objrepr_t *repr)
	{
		string *r = new string;
		*r = repr->value;
		delete repr;
		return r;
	}

   static objrepr_t* string_gen(string *obj)
  {
       objrepr_t* ret = new objrepr_t("string","");
       objrepr_t* curf;
  return ret;
  }

   static objrepr_t* vec_int_gen(vector<int> *obj)
 {
       objrepr_t* ret = new objrepr_t("vector<int>","");
       objrepr_t* elem;
       for (int i = 0; i<obj->size(); i++) 
	{ 
       ret->fields.push_back(pair<char*, objrepr_t*>("int", int_gen(&obj->at(i))));
       }
  return ret;
  }

   static string* string_neg(objrepr_t* repr)
    {
       string* ret = new string;
  return ret;
  }

   static vector<int>* vec_int_neg(objrepr_t *repr)
	{
       vector<int>* ret = new vector<int>;
       for (int i = 0; i<repr->fields.size(); i++) 
		{ 
       ret->push_back(*int_neg(repr->fields.at(i).second));
       }
  return ret;
  }

};

class hfss_tstub_t: public stub_t
{
	char bf[255];
	int bfi; 
 	float bff;
 public:   

		void close() 
		{
			ch->csend("ifs stop\n"); 
		}

		hfss_tstub_t(hcomm_t *c, char *name) 
 		{
 			c->open_ifs<hfss_tstub_t>(this, name); 
 		} 

		//remote function (#remote) 
		string caddnode(string noden, vector<int> files) 
		{ 
			ch->csend("caddnode\n");
			objrepr_send(hfss_t_fg::string_gen(&noden), ch, 1);
			objrepr_send(hfss_t_fg::vec_int_gen(&files), ch, 1);
			string *ret;
			ret = hfss_t_fg::string_neg(objrepr_recv(ch, 1));

		return *ret;
		} 
		//End remote function 

};

// Server skel for hfss_t
class hfss_tskel_t : public skel_t
{
	hfss_t *obj;

	char bf[255]; 
 	int bfi; 
 	float bff;
	public: 

	hfss_tskel_t(hfss_t *o) { obj = o; }

	virtual char *call(send_channel_t* ch, char *command) 
	{ 
		//remote function (#remote) 
		if (!strcmp(command, "caddnode\n")) 
		{ 
			string *noden = hfss_t_fg::string_neg(objrepr_recv(ch, 1));
			vector<int> *files = hfss_t_fg::vec_int_neg(objrepr_recv(ch, 1));
			string *ret = new string;
			*ret = obj->caddnode( *noden, *files);
			objrepr_send(hfss_t_fg::string_gen(ret), ch, 1);

		return 0;
		} 
		//End remote function 

	}

 
 };

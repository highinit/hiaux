/*
Generated by vardist stub generator. Don't change.
*/

#pragma once
#include "common.h"
#include "objrepr.h"
#include "params_combinations.h"


class remote_class_t_fg 
{
 public: 

	static objrepr_t *int_gen(int *a)
	{
		objrepr_t *repr = new objrepr_t;
		sprintf(repr->value, "%d", *a);
		strcpy(repr->type, "int");
		return repr;
	}

	static objrepr_t *float_gen(float *a)
	{
		objrepr_t *repr = new objrepr_t;
		sprintf(repr->value, "%f", *a);
		strcpy(repr->type, "float");
		return repr;
	}

	static objrepr_t *char_gen(char *a)
	{
		objrepr_t *repr = new objrepr_t;
		strcpy(repr->value, a);
		strcpy(repr->type, "char*");
		return repr;
	}

	static int *int_neg(objrepr_t *repr)
	{
		int *r = new int;
		sscanf(repr->value, "%d", r);
		delete repr;
		return r;
	}

	static float *float_neg(objrepr_t *repr)
	{
		float *r = new float;
		sscanf(repr->value, "%f", r);
		delete repr;
		return r;
	}

	static char *char_neg(objrepr_t *repr)
	{
		char *r = new char [255];
		strcpy (r, repr->value);
		delete repr;
		return r;
	}

};

class remote_class_tstub_t: public stub_t
{
	char bf[255];
	int bfi; 
 	float bff;
 public:   

		void close() 
		{
			ch->csend("ifs stop\n"); 
		}

		remote_class_tstub_t(hcomm_t *c, char *name) 
 		{
 			c->open_ifs<remote_class_tstub_t>(this, name); 
 		} 

		//remote function (#remote) 
		char *foo() 
		{ 
			ch->csend("foo\n");
			char *ret;
			ret = remote_class_t_fg::char_neg(objrepr_recv(ch, 1));

		return ret;
		} 
		//End remote function 

};

// Server skel for remote_class_t
class remote_class_tskel_t : public skel_t
{
	remote_class_t *obj;

	char bf[255]; 
 	int bfi; 
 	float bff;
	public: 

	remote_class_tskel_t(remote_class_t *o) { obj = o; }

	virtual char *call(send_channel_t* ch, char *command) 
	{ 
		//remote function (#remote) 
		if (!strcmp(command, "foo\n")) 
		{ 
			char *ret;
			ret = obj->foo();
			objrepr_send(remote_class_t_fg::char_gen(ret), ch, 1);

		return 0;
		} 
		//End remote function 

	}

 
 };

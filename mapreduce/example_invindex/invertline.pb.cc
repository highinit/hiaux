// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "invertline.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mapr_test {

namespace {

const ::google::protobuf::Descriptor* InvertLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvertLine_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_invertline_2eproto() {
  protobuf_AddDesc_invertline_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "invertline.proto");
  GOOGLE_CHECK(file != NULL);
  InvertLine_descriptor_ = file->message_type(0);
  static const int InvertLine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvertLine, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvertLine, pages_),
  };
  InvertLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvertLine_descriptor_,
      InvertLine::default_instance_,
      InvertLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvertLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvertLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvertLine));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_invertline_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvertLine_descriptor_, &InvertLine::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_invertline_2eproto() {
  delete InvertLine::default_instance_;
  delete InvertLine_reflection_;
}

void protobuf_AddDesc_invertline_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020invertline.proto\022\tmapr_test\"(\n\nInvertL"
    "ine\022\013\n\003key\030\001 \002(\004\022\r\n\005pages\030\002 \003(\004", 71);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "invertline.proto", &protobuf_RegisterTypes);
  InvertLine::default_instance_ = new InvertLine();
  InvertLine::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_invertline_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_invertline_2eproto {
  StaticDescriptorInitializer_invertline_2eproto() {
    protobuf_AddDesc_invertline_2eproto();
  }
} static_descriptor_initializer_invertline_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int InvertLine::kKeyFieldNumber;
const int InvertLine::kPagesFieldNumber;
#endif  // !_MSC_VER

InvertLine::InvertLine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InvertLine::InitAsDefaultInstance() {
}

InvertLine::InvertLine(const InvertLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InvertLine::SharedCtor() {
  _cached_size_ = 0;
  key_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvertLine::~InvertLine() {
  SharedDtor();
}

void InvertLine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InvertLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvertLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvertLine_descriptor_;
}

const InvertLine& InvertLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_invertline_2eproto();  return *default_instance_;
}

InvertLine* InvertLine::default_instance_ = NULL;

InvertLine* InvertLine::New() const {
  return new InvertLine;
}

void InvertLine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = GOOGLE_ULONGLONG(0);
  }
  pages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvertLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pages;
        break;
      }
      
      // repeated uint64 pages = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_pages())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_pages())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pages;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InvertLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->key(), output);
  }
  
  // repeated uint64 pages = 2;
  for (int i = 0; i < this->pages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->pages(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InvertLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->key(), target);
  }
  
  // repeated uint64 pages = 2;
  for (int i = 0; i < this->pages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->pages(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InvertLine::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key());
    }
    
  }
  // repeated uint64 pages = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->pages_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->pages(i));
    }
    total_size += 1 * this->pages_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvertLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvertLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvertLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvertLine::MergeFrom(const InvertLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  pages_.MergeFrom(from.pages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvertLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvertLine::CopyFrom(const InvertLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvertLine::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void InvertLine::Swap(InvertLine* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    pages_.Swap(&other->pages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvertLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvertLine_descriptor_;
  metadata.reflection = InvertLine_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mapr_test

// @@protoc_insertion_point(global_scope)
